Here's a first draft of the documentation explaining how the ASGI protocol is mapped to Perl. This covers key areas such as request handling, concurrency model, and response processing. We can iterate on this as we refine the implementation.

---

# APSGI - Asynchronous Perl Web Server Gateway Interface specification

## Version

0.01 - DRAFT

## Abstract

This document specifies a standard asynchronous interface between web servers and
Perl web applications or frameworks. This interface is designed to promote web
application portability and reduce duplication of effort by web application
framework developers.

## Introduction

While work has been done to support asynchronous response handling in PSGI (the
`psgi.nonblocking` environment key), support for protocols with multiple input
events (such as WebSockets) remained hacks. The use of non-blocking or
asynchronous handling based on PSGI never took off. The PSGI specification
hasn't changed since July 2013. Since then, asynchronous programming in has
taken off in many programming languages, including in Perl: although Perl
does not natively support the `async/await` pattern like Python or JavaScript,
the module `Future::AsyncAwait` implements the pattern since 24 January 2018
for Perl versions 5.16 and up.

Considering the above and the fact that similar specifications have existed for
several years now for other languages, the time has arrived to create a fully
asynchronous webserver gateway interface specification for Perl.

---

Perl does not natively support Pythonâ€™s `async/await` pattern, but we can achieve similar
functionality using **Futures** (from `Future.pm`) and **IO::Async** (from `IO::Async::Loop`).
Below is how we translate key ASGI components into Perl.

---

## Specification

### Architecture overview

The specification defines two components:

1. the (APSGI) server
2. the application

The server and application exchange messages defined in (separate) protocol
specifications. Protocol definitions include: HTTP, WebSockets and Lifespan.

The specification explicitly considers the concept "middleware": an application
wrapper. By doing so it assumes the role of a server in relation
to the wrapped application. At the same time, it presents itself as an
application to its own server.

### Call sequence

The server initiates a bidirectional stream of event messages by calling the
asynchronous application entry point with a `scope` and two callbacks: `receive`
and `send`. These will be used by the application to receive events and initiate
replies.

The server awaits the application call while the application processes the events
it retrieves through repeated `receive` calls, only to return after `send`-ing and
awaiting its final response.

Whether or not this event stream is associated with a network socket depends on
the protocol; for example, the Lifespan protocol is associated with the APSGI Server
life cycle, not with any network socket specifically.

### Data types

The following are the allowed data types to be used in scopes and events:

* Unicode string - Perl character string; MAY contain wide characters
* Byte string - also known as Bytes - Perl string where each character is interpreted
  as a byte; MUST NOT contain wide characters
* Integers - integer numbers in the signed 64-bit number range
* Floating point numbers - if supported by the Perl platform: IEEE 754 double
  precision range, no `NaN`, `+Inf` or `-Inf`
* Arrays - array references with elements in this list of data types
* Hashes - hash references with keys being unicode strings and values in this list
  of data types
* Booleans - ... (how?)
* `undef`

### Applications

The APSGI application entry point is defined as:

```perl
async sub app( $scope, $receive\_cb, $send\_cb ) { ... }
```

where `$scope` MUST be a hash reference. `$receive_cb` and `$send_cb` MUST be
code references to asynchronous functions (`async sub` or `sub` returning a Future).

The content of `$scope` is defined in the next section.

The entrypoint should throw an exception (by calling `die()`) to reject protocols
they do not understand. (**is this efficient?? in some languages stack traces take _time_**)

The application interacts with the server by iteratively receiving events from
awaited `$receive_cb` invocations and sending events by through awaited
`$send_cb` calls. When the application is done sending and receiving events, the
asynchronous function returns.

### Scopes

Scopes MUST be a hash reference. The following keys MUST be present:

* `type` (character string) - its value indicates the protocol the server
  expects to establish.
* `apsgi` (hash reference), with the following keys:
  * `version` (character string) - MUST be present; indicates the APSGI version the
    server implements
  * `spec_version` (character string) - MUST be present; indicates the version of
    the protocol specification indicated by the scope key `type` which the server
    implements

Protocols define additional keys to be passed in `$scope`.

Scopes MUST NOT be modified by applications. Middleware wanting to pass additional
values in scopes must copy the scope and pass the copied scope to its wrapped
application.

### Protocols

Protocols define additional keys in the application `$scope` as well as the
messages - describing protocol events - being transferred between application
and server.

The `type` key in `$scope` indicates the name of the protocol. To prevent
colision of protocol names, the `APSGI::Protocol::` namespace has been designated
as the protocol namespace registry. Protocols definitions MUST be published as a
module by their name as used in the `type` key. That is, the `http` protocol
specification will be published as the (documentation-only)
module `APSGI::Protocol::http`.

Names of events defined in protocols MUST be prefixed by the name of the protocol
followed by a dot. That is, the name prefix for the http protocol is `http.`.

Current protocol specifications:

* HTTP (TODO)
* WebSocket (TODO)
* Lifespan (TODO)


### Events

Each event is described by a hash with a `type` key that contains a Unicode string
naming the message. For example in case of the http protocol, the message name
is either `http.request` or `http.disconnect`. Applications and middleware MAY
invent their own high-level messages and send them between application instances.
Such events MUST prefix the message name with `x-` to prevent namespace collision
with events registered through published protocols.

---

## **1. ASGI Overview**
ASGI (Asynchronous Server Gateway Interface) is a specification that extends WSGI by supporting asynchronous applications. The ASGI interface consists of:
- **A callable application** that receives a `scope` (metadata about the connection).
- **Two async functions (`receive` and `send`)** for handling messages.

A typical ASGI application looks like this in Python:

```python
async def app(scope, receive, send):
    event = await receive()
    await send({"type": "http.response.start", "status": 200, "headers": [(b"content-type", b"text/plain")]})
    await send({"type": "http.response.body", "body": b"Hello, world!"})
```

---

## **2. Mapping ASGI to Perl**

### **2.1. Application Interface**
The ASGI application callable is mapped to a **Perl subroutine** that takes:
- A **hash reference (`$scope`)** representing the ASGI scope.
- A **callback for receiving events (`$receive_cb`)**.
- A **callback for sending responses (`$send_cb`)**.

#### **Perl ASGI App Signature**

```perl
sub app {
    my ($scope, $receive_cb, $send_cb) = @_;
    
    # Process incoming HTTP request
    $receive_cb->()->then(sub {
        my $event = shift;
        
        # Send response headers
        return $send_cb->(
            type    => "http.response.start",
            status  => 200,
            headers => [['content-type', 'text/plain']]
        );
    })->then(sub {
        # Send response body
        return $send_cb->(
            type => "http.response.body",
            body => "Hello, world!"
        );
    });
}
```

@jjn1056, the above function actually does not work with `http.request` events with
a `more_body` value of `True`: that will need at least one more iteration to retrieve
the rest of the body.

- This function **returns a Future** that resolves once the response is fully sent.
- It relies on `then()` chaining to mimic `await` behavior.

Alternatively, we can leverage Future::AsyncAwait and replace the callback-based approach.

```perl
use Future::AsyncAwait;

async sub app {
    my ($scope, $receive_cb, $send_cb) = @_;

    my $event = await $receive_cb->();

    await $send_cb->(
        type    => "http.response.start",
        status  => 200,
        headers => [['content-type', 'text/plain']]
    );

    await $send_cb->(
        type => "http.response.body",
        body => "Hello, world!"
    );
}
```
---

### **2.2. Request Handling**
ASGI supports multiple protocols (HTTP, WebSockets, etc.). These are mapped in Perl as follows:

| ASGI Scope Key | Perl Representation |
|---------------|--------------------|
| `type` | `$scope->{type}` (e.g., `"http"` or `"websocket"`) |
| `http_version` | `$scope->{http_version}` |
| `method` | `$scope->{method}` (e.g., `"GET"`) |
| `path` | `$scope->{path}` |
| `query_string` | `$scope->{query_string}` |
| `headers` | `$scope->{headers}` (arrayref of `["header", "value"]`) |

Example **incoming request** as a Perl data structure:
```perl
{
    type         => "http",
    http_version => "1.1",
    method       => "GET",
    path         => "/",
    query_string => "foo=bar",
    headers      => [ ["host", "example.com"], ["user-agent", "Mozilla"] ],
}
```

---

### **2.3. Response Handling**
Responses follow the ASGI structure:
- **HTTP Start (`http.response.start`)**: Status code and headers.
- **HTTP Body (`http.response.body`)**: Response body (can be sent in multiple chunks).

Perl equivalent:
```perl
$send_cb->(
    type    => "http.response.start",
    status  => 200,
    headers => [['content-type', 'text/plain']]
)->then(sub {
    return $send_cb->(
        type => "http.response.body",
        body => "Hello, world!"
    );
});
```
This follows the **IO::Async::Future** pattern for non-blocking execution.

---

### **2.4. Concurrency Model**
ASGI supports **concurrent request handling**. In Perl:
- **IO::Async is used as the event loop**.
- **Futures handle async responses**.
- **WebSockets and long polling use streaming Future objects**.

Example **handling multiple concurrent requests**:
```perl
use IO::Async::Loop;
my $loop = IO::Async::Loop->new;

$loop->add(
    IO::Async::Stream->new(
        on_read => sub {
            my ($self, $buffref) = @_;
            process_request($buffref)->then(sub {
                my $response = shift;
                return $self->write($response);
            });
        }
    )
);

$loop->run;
```
This ensures **non-blocking I/O** while handling multiple connections.

---

## **3. HTTP vs WebSockets**
ASGI supports WebSockets (`ws`/`wss`), which require **stateful bidirectional communication**.

### **3.1. WebSockets in ASGI**
In ASGI, a WebSocket connection lifecycle has these events:
1. **Connect** (`websocket.connect`)
2. **Receive message** (`websocket.receive`)
3. **Send message** (`websocket.send`)
4. **Close connection** (`websocket.disconnect`)

### **3.2. Perl WebSocket Handling**
We can implement WebSockets in Perl using `IO::Async::Stream`:

```perl
sub websocket_app {
    my ($scope, $receive_cb, $send_cb) = @_;
    
    # Accept WebSocket connection
    $send_cb->( type => "websocket.accept" )->then(sub {
        return $receive_cb->();
    })->then(sub {
        my $event = shift;
        
        # Echo the received message back
        return $send_cb->(
            type => "websocket.send",
            text => $event->{text}
        );
    });
}
```
This **mirrors ASGI's WebSocket lifecycle** in an event-driven way.

---

## **4. Running the Perl ASGI App**
We need an ASGI-compatible **server** that interacts with our Perl application.

Example **IO::Async-based server**:
```perl
use IO::Async::Loop;
use My::ASGI::Adapter;

my $loop = IO::Async::Loop->new;
my $server = My::ASGI::Adapter->new(app => \&app);

$loop->add($server);
$loop->run;
```

---

## Terminology

(unfortunately, GitHub flavored Markdown doesn't render definition lists)

<dl>
  <dt>APSGI</dt>
  <dd>Asynchronous Perl Web Server Gateway Interface specification; this specification</dd>

  <dt>APSGI Server</dt>
  <dd>Component in the APSGI specification handling interaction with webservers;
      abstracting web server request interfaces such as CGI, FastCGI or reverse proxied HTTP</dd>

  <dt>Application</dt>
  <dd>APSGI component implementing the standardized web application framework API</dd>

  <dt>Middleware</dt>
  <dd>Component implementing both the Application and APSGI Server APIs placing itself between
      a server and an application.</dd>

  <dt>Web server</dt>
  <dd>Server handling (external) network request, usually HTTP requests.</dd>
</dl>

## Changelog

## Acknowledgements

Parts of this specification are adopted from the following specifications.

* [ASGI](https://asgi.readthedocs.io/en/latest/introduction.html)
* [PSGI](https://metacpan.org/dist/PSGI/view/PSGI.pod)

## Authors

* John Napiorkowski
* Erik Huelsmann

## Contributors

